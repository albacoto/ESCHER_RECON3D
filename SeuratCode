
```{r}
library(Seurat)

ht_list <- list() #store the information map cell_barcode to hashID (or sampleID or indiviualID)
toc_list <- list() # store the raw count matrix

# Loop through batches (Batch1Channel1 to Batch8Channel1)
for (i in 1:8) {
  # Construct the path dynamically
  path <- paste0("/maps/projects/thor/people/gjl413/projects/psychENCODE/data/SZBDMulti-Seq/CellrangerOutput_Intron/Batch", 
                 i, 
                 "Channel1/outs/filtered_feature_bc_matrix/")
  counts <- Read10X(data.dir = path)
  
  
  toc_list[[i]] <- as.data.frame(counts$`Gene Expression`)
  df2 <- as.data.frame(counts$`Antibody Capture`)
  
  
  cellhash <- CreateSeuratObject(counts = df2,project = "cell_hashing", assay = "HTO")
  cellhash <- NormalizeData(cellhash, assay = "HTO", normalization.method = "CLR")
  cellhash <- HTODemux(cellhash, assay = "HTO", positive.quantile = 0.85)
  
  
  ht_list[[i]] <- as.data.frame(cellhash$hash.ID)

}

saveRDS(ht_list,file = "/maps/projects/thor/people/tbm613/hashtag2.rds")
saveRDS(toc_list,file = "/maps/projects/thor/people/tbm613/toc2.rds")

toc_list <- readRDS("/maps/projects/thor/people/tbm613/toc2.rds")
ht_list <- readRDS("/maps/projects/thor/people/tbm613/hashtag2.rds")

ht_list
```

```{r} 1ST GENE EXPRESSION AND THEN ADD THE HTO COUNTS

library(Seurat)

ht_list <- list() # store mapping from cell barcode to hash ID
toc_list <- list() # store raw gene expression counts

# Loop through batches
for (i in 1:8) {
  path <- paste0("/maps/projects/thor/people/gjl413/projects/psychENCODE/data/SZBDMulti-Seq/CellrangerOutput_Intron/Batch", 
                 i, 
                 "Channel1/outs/filtered_feature_bc_matrix/")
  counts <- Read10X(data.dir = path)

  # Gene expression matrix
  gene_counts <- counts$`Gene Expression`
  hto_counts <- counts$`Antibody Capture`
  
  # Create Seurat object using gene expression counts
  seurat_obj <- CreateSeuratObject(counts = gene_counts, project = paste0("Batch", i))
  
  # Add HTO data as a separate assay
  seurat_obj[["HTO"]] <- CreateAssayObject(counts = hto_counts)
  
  # Normalize HTO data and perform demultiplexing
  seurat_obj <- NormalizeData(seurat_obj, assay = "HTO", normalization.method = "CLR")
  seurat_obj <- HTODemux(seurat_obj, assay = "HTO", positive.quantile = 0.85)
  
  # Store results
  toc_list[[i]] <- as.data.frame(gene_counts)  # Save gene expression
  ht_list[[i]] <- as.data.frame(seurat_obj$hash.ID)  # Save hash assignments
}

# Save results
saveRDS(ht_list, file = "/maps/projects/thor/people/tbm613/hashtag2.rds")
saveRDS(toc_list, file = "/maps/projects/thor/people/tbm613/toc2.rds")
```


----------

### LOAD THE FILES

seurat_obj <- CreateSeuratObject(counts = as.matrix(gene_matrix), project = "scRNAseq")

ht_labels <- as.character(ht_data$`cellhash$hash.ID`)  # Convert factor to character
names(ht_labels) <- rownames(ht_list[[1]])  # Keep barcodes

hto_matrix <- fastDummies::dummy_cols(data.frame(HTO = ht_labels), select_columns = "HTO", remove_first_dummy = TRUE)

# Set rownames as barcodes
rownames(hto_matrix) <- names(ht_labels)
hto_matrix <- as.matrix(hto_matrix)  # Convert to matrix

hto_matrix <- hto_matrix[, -1]  # Remove the first column (HTO labels)
hto_matrix <- apply(hto_matrix, 2, as.numeric)  # Convert all values to numeric
hto_matrix <- as.matrix(hto_matrix)  # Ensure it's a matrix

common_barcodes <- intersect(rownames(hto_matrix), colnames(seurat_obj))

colnames(hto_matrix)  # Should return a list of cell barcodes
rownames(hto_matrix)  # Should return HTO categories (e.g., "CON1", "SZ1")

rownames(ht_data) <- colnames(cellhash)  # Copy barcodes from `cellhash`

library(fastDummies)

# Convert HTO classifications into a one-hot encoded matrix
hto_matrix <- fastDummies::dummy_cols(data.frame(HTO = ht_data$`cellhash$hash.ID`), 
                                      select_columns = "HTO", 
                                      remove_first_dummy = TRUE)

# Assign barcodes as rownames
rownames(hto_matrix) <- rownames(ht_data)

# Convert to matrix
hto_matrix <- as.matrix(hto_matrix)

rownames(hto_matrix)  # Should now return barcodes

seurat_obj[["HTO"]] <- CreateAssayObject(counts = t(hto_matrix))  # Transpose to match Seurat format


Assays(seurat_obj)  # Should list "RNA" and "HTO"

seurat_obj <- NormalizeData(seurat_obj, assay = "HTO", normalization.method = "CLR")

seurat_obj <- HTODemux(seurat_obj, assay = "HTO", positive.quantile = 0.85)


###CHECK FOR MISSING VALUES
sum(is.na(GetAssayData(seurat_obj, assay = "HTO")))
hto_data <- GetAssayData(seurat_obj, assay = "HTO")
hto_data[is.na(hto_data)] <- 0  # Replace NAs with zeros
seurat_obj[["HTO"]] <- CreateAssayObject(counts = hto_data)

summary(GetAssayData(seurat_obj, assay = "HTO"))








