
library(Seurat)

batch_list <- list()  # Store Seurat objects for each batch
ht_list <- list()  # Store hash.ID mapping
toc_list <- list() # Store raw gene expression counts

# Loop through batches (Batch1Channel1 to Batch8Channel1)
for (i in 1:8) {
  # Construct the path dynamically
  path <- paste0("/maps/projects/thor/people/gjl413/projects/psychENCODE/data/SZBDMulti-Seq/CellrangerOutput_Intron/Batch", 
                 i, 
                 "Channel1/outs/filtered_feature_bc_matrix/")
  
  counts <- Read10X(data.dir = path)  # Read raw data
  
  # Extract Gene Expression and HTO counts
  gene_counts <- counts$`Gene Expression`
  hto_counts <- counts$`Antibody Capture`
  
  # Ensure Gene Names Are Assigned (before creating Seurat object)
  rownames(gene_counts) <- rownames(counts$`Gene Expression`)  # Assign gene names
  
  # Step 1: Create Seurat object using HTO data first
  cellhash <- CreateSeuratObject(counts = hto_counts, project = paste0("Batch", i), assay = "HTO")
  
  # Normalize and demultiplex HTO data
  cellhash <- NormalizeData(cellhash, assay = "HTO", normalization.method = "CLR")
  cellhash <- HTODemux(cellhash, assay = "HTO", positive.quantile = 0.75)  # Adjust threshold if needed

  # Store hash.ID mapping
  ht_list[[i]] <- as.data.frame(cellhash$hash.ID)
  
  # Step 2: Add Gene Expression Data to the Seurat Object (with correct gene names)
  cellhash[["RNA"]] <- CreateAssayObject(counts = gene_counts[, colnames(cellhash)]) 
  
  # Store gene expression counts
  toc_list[[i]] <- as.data.frame(gene_counts[, colnames(cellhash)]) 
  
  # Store each batch in a list
  batch_list[[i]] <- cellhash
}

# Step 3: Merge All Batches Into One Seurat Object
seurat_obj <- merge(batch_list[[1]], y = batch_list[2:8], add.cell.ids = paste0("Batch", 1:8), project = "Merged_SZBD")

# Save results
saveRDS(seurat_obj, file = "/maps/projects/thor/people/tbm613/seurat_merged.rds")
saveRDS(ht_list, file = "/maps/projects/thor/people/tbm613/hashtag.rds")
saveRDS(toc_list, file = "/maps/projects/thor/people/tbm613/toc.rds")

----------

1. VERIFY THE HTO DEMULTIPLEXING RESULTS & gene names

table(seurat_obj$HTO_classification.global)
table(seurat_obj$hash.ID)


head(rownames(seurat_obj[["RNA"]]@counts))
head(colnames(seurat_obj))


2. REMOVE DOUBLETS AND NEGATIVES

seurat_obj <- subset(seurat_obj, subset = HTO_classification.global == "Singlet")
table(seurat_obj$HTO_classification.global)


3. SUBSET ONLY SZ & CON

unique(seurat_obj$hash.ID)
seurat_obj <- subset(seurat_obj, subset = hash.ID %in% grep("^SZ|^CON", unique(seurat_obj$hash.ID), value = TRUE))
table(seurat_obj$hash.ID)

VlnPlot(seurat_obj, 
        features = c("nFeature_RNA", "nCount_RNA"), 
        group.by = "HTO_classification.global", 
        pt.size = 0,  # Removes points
        ncol = 2)


VISUALIZATION OF SEURAT:
4. STANDARD scRNA-seq workflow

DefaultAssay(seurat_obj)
DefaultAssay(seurat_obj) <- "RNA"

slotNames(seurat_obj@assays$RNA)
dim(GetAssayData(seurat_obj, layer = "counts"))

seurat_obj <- FindVariableFeatures(seurat_obj, selection.method = "vst", nfeatures = 2000, layer = "counts")

# Normalize Data
seurat_obj <- NormalizeData(seurat_obj, layer = "counts")
# Scale Data
seurat_obj <- ScaleData(seurat_obj, features = VariableFeatures(seurat_obj), layer = "counts")

# Run PCA
seurat_obj <- RunPCA(seurat_obj)
ElbowPlot(seurat_obj)  # Check how many PCs to use

# Use 10 PCs for clustering
seurat_obj <- FindNeighbors(seurat_obj, dims = 1:10)
seurat_obj <- FindClusters(seurat_obj, resolution = 0.5)  # Adjust resolution as needed

# Run UMAP using the same PCs
seurat_obj <- RunUMAP(seurat_obj, dims = 1:10)

seurat_obj$group <- ifelse(grepl("^SZ", seurat_obj$hash.ID), "SZ", "CON")
DimPlot(seurat_obj, reduction = "umap", group.by = "group")



WHEN ANALYZING seurat_merged.rds:

# Load libraries
library(Seurat)
library(dplyr)

# Load Seurat object
seurat_obj <- readRDS("/maps/projects/thor/people/tbm613/seurat_merged.rds")

# Step 1: Filter to singlets only
seurat_obj <- subset(seurat_obj, subset = HTO_classification.global == "Singlet")

# Step 2: Filter to SZ and CON cells
seurat_obj <- subset(seurat_obj, subset = hash.ID %in% grep("^SZ|^CON", unique(seurat_obj$hash.ID), value = TRUE))

# Optional: Rename condition column
seurat_obj$condition <- seurat_obj$hash.ID  # or factorize it if needed
table(seurat_obj$condition)

# Step 3: Compute average expression per gene for each group
avg_expr <- AverageExpression(seurat_obj, group.by = "condition", return.seurat = FALSE)

# Step 4: View results
head(avg_expr$RNA)

# Convert sparse matrix to dense dataframe
expr_df <- as.data.frame(as.matrix(avg_expr$RNA))

# Combine SZ and CON columns manually
expr_df$mean_expr_SZ <- rowMeans(expr_df[, grepl("^SZ", colnames(expr_df))])
expr_df$mean_expr_CON <- rowMeans(expr_df[, grepl("^CON", colnames(expr_df))])

# Keep only relevant columns
expr_final <- expr_df[, c("mean_expr_SZ", "mean_expr_CON")]

# Add gene names as a column
expr_final$gene <- rownames(expr_final)

# Save it
write.csv(expr_final, "mean_expression_SZ_CON.csv", row.names = FALSE)


# UMAP
# Run Variable Features Selection
DefaultAssay(seurat_obj)
DefaultAssay(seurat_obj) <- "RNA"

slotNames(seurat_obj@assays$RNA)
dim(GetAssayData(seurat_obj, layer = "counts"))

seurat_obj <- FindVariableFeatures(seurat_obj, selection.method = "vst", nfeatures = 2000, layer = "counts")

# Normalize Data
seurat_obj <- NormalizeData(seurat_obj, layer = "counts")
# Scale Data
seurat_obj <- ScaleData(seurat_obj, features = VariableFeatures(seurat_obj), layer = "counts")

# Run PCA
seurat_obj <- RunPCA(seurat_obj)
ElbowPlot(seurat_obj)  # Check how many PCs to use

# Use 10 PCs for clustering
seurat_obj <- FindNeighbors(seurat_obj, dims = 1:10)
seurat_obj <- FindClusters(seurat_obj, resolution = 0.5)  # Adjust resolution as needed

# Run UMAP using the same PCs
seurat_obj <- RunUMAP(seurat_obj, dims = 1:10)

seurat_obj$group <- ifelse(grepl("^SZ", seurat_obj$hash.ID), "SZ", "CON")
DimPlot(seurat_obj, reduction = "umap", group.by = "group")

# Annotate the clusters (cell types)
cluster_markers <- FindAllMarkers(seurat_obj, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
head(cluster_markers)

FeaturePlot(seurat_obj, features = c("CUX2", "GLIS3", "ENSG00000233290", "ENSG00000229425", "TESPA1")) #with cell types I obtained

# Label the clusters
Idents(seurat_obj) <- "seurat_clusters"
levels(seurat_obj)

new_ids <- paste0("Cluster", as.numeric(levels(seurat_obj)) + 1)
names(new_ids) <- levels(seurat_obj)
seurat_obj <- RenameIdents(seurat_obj, new_ids)

seurat_obj$cluster_label <- Idents(seurat_obj)
DimPlot(seurat_obj, reduction = "umap", label = TRUE, repel = TRUE)


# Differential expression (SZ vs CON)
deg_sz_vs_con <- FindMarkers(seurat_obj, ident.1 = "SZ", ident.2 = "CON", group.by = "group", logfc.threshold = 0.25)

# Create a results list to store DEGs
deg_by_cluster <- list()

# Loop through each cluster
for (cluster_id in levels(seurat_obj)) {
  
  # Subset to one cluster
  cluster_cells <- subset(seurat_obj, idents = cluster_id)
  
  # Check if both groups exist in this cluster (SZ and CON)
  if (length(unique(cluster_cells$group)) == 2) {
    
    # Run DE analysis (SZ vs. CON) within this cluster
    deg <- FindMarkers(cluster_cells, ident.1 = "SZ", ident.2 = "CON", group.by = "group", 
                       logfc.threshold = 0.25, min.pct = 0.1)
    
    # Store the result
    deg_by_cluster[[cluster_id]] <- deg
  }
}


for (cluster_name in names(deg_by_cluster)) {
  write.csv(deg_by_cluster[[cluster_name]],
            file = paste0("DEG_SZ_vs_CON_", cluster_name, ".csv"))
}

head(rownames(deg_by_cluster[["Cluster3"]]))  # example: get top gene names
FeaturePlot(seurat_obj, features = c("GENE1", "GENE2"))  # Replace with real genes

# Aditional plots
1. 
VlnPlot(seurat_obj, features = c("nFeature_RNA", "nCount_RNA"), group.by = "group", pt.size = 0)

2. 
top10 <- head(VariableFeatures(seurat_obj), 10)
plot1 <- VariableFeaturePlot(seurat_obj)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot1 + plot2

3.
FeaturePlot(seurat_obj, features = c("RELN", "HTR2C", "CXCL14"))

4. 
DimPlot(seurat_obj, reduction = "pca")


## TO CONVERT THE seurat_merged.rds to .csv file:

# Extract normalized expression data
expr_matrix <- as.data.frame(t(as.matrix(seurat_obj[["RNA"]]@data)))

# Get metadata
metadata <- seurat_obj@meta.data

# Combine into one big table
full_matrix <- cbind(metadata, expr_matrix)

# Save to file
write.csv(full_matrix, file = "seurat_merged_expression.csv", row.names = TRUE)


full_matrix <- read.csv("seurat_merged_expression.csv", row.names = 1)
dim(full_matrix)        # Number of rows (cells) Ã— columns (metadata + genes)
colnames(full_matrix)[1:10]   # See the first few columns (should be metadata)
tail(colnames(full_matrix))   # See the last columns (should be genes)
head(rownames(full_matrix))   # Check cell barcodes (should look like "BatchX_CELLID")
head(full_matrix[, 1:10])     # Should show metadata
head(full_matrix[, (ncol(full_matrix)-5):ncol(full_matrix)])  # Should show gene expression






