
```{r}
library(Seurat)

ht_list <- list() #store the information map cell_barcode to hashID (or sampleID or indiviualID)
toc_list <- list() # store the raw count matrix

# Loop through batches (Batch1Channel1 to Batch8Channel1)
for (i in 1:8) {
  # Construct the path dynamically
  path <- paste0("/maps/projects/thor/people/gjl413/projects/psychENCODE/data/SZBDMulti-Seq/CellrangerOutput_Intron/Batch", 
                 i, 
                 "Channel1/outs/filtered_feature_bc_matrix/")
  counts <- Read10X(data.dir = path)
  
  
  toc_list[[i]] <- as.data.frame(counts$`Gene Expression`)
  df2 <- as.data.frame(counts$`Antibody Capture`)
  
  
  cellhash <- CreateSeuratObject(counts = df2,project = "cell_hashing", assay = "HTO")
  cellhash <- NormalizeData(cellhash, assay = "HTO", normalization.method = "CLR")
  cellhash <- HTODemux(cellhash, assay = "HTO", positive.quantile = 0.85)
  
  
  ht_list[[i]] <- as.data.frame(cellhash$hash.ID)

}

saveRDS(ht_list,file = "/maps/projects/thor/people/tbm613/hashtag5.rds")
saveRDS(toc_list,file = "/maps/projects/thor/people/tbm613/toc5.rds")

toc_list <- readRDS("/maps/projects/thor/people/tbm613/toc5.rds")
ht_list <- readRDS("/maps/projects/thor/people/tbm613/hashtag5.rds")

ht_list
```

```{r} 1ST GENE EXPRESSION AND THEN ADD THE HTO COUNTS

library(Seurat)

ht_list <- list() # store mapping from cell barcode to hash ID
toc_list <- list() # store raw gene expression counts

# Loop through batches
for (i in 1:8) {
  path <- paste0("/maps/projects/thor/people/gjl413/projects/psychENCODE/data/SZBDMulti-Seq/CellrangerOutput_Intron/Batch", 
                 i, 
                 "Channel1/outs/filtered_feature_bc_matrix/")
  counts <- Read10X(data.dir = path)

  # Gene expression matrix
  gene_counts <- counts$`Gene Expression`
  hto_counts <- counts$`Antibody Capture`
  
  # Create Seurat object using gene expression counts
  seurat_obj <- CreateSeuratObject(counts = gene_counts, project = paste0("Batch", i))
  
  # Add HTO data as a separate assay
  seurat_obj[["HTO"]] <- CreateAssayObject(counts = hto_counts)
  
  # Normalize HTO data and perform demultiplexing
  seurat_obj <- NormalizeData(seurat_obj, assay = "HTO", normalization.method = "CLR")
  seurat_obj <- HTODemux(seurat_obj, assay = "HTO", positive.quantile = 0.85)
  
  # Store results
  toc_list[[i]] <- as.data.frame(gene_counts)  # Save gene expression
  ht_list[[i]] <- as.data.frame(seurat_obj$hash.ID)  # Save hash assignments
}

# Save results
saveRDS(ht_list, file = "/maps/projects/thor/people/tbm613/hashtag3.rds")
saveRDS(toc_list, file = "/maps/projects/thor/people/tbm613/toc3.rds")
```


3rd try:
library(Seurat)

batch_list <- list()  # Store Seurat objects from each batch
ht_list <- list()  # Store hash.ID mapping
toc_list <- list() # Store raw gene expression counts

# Loop through batches (Batch1Channel1 to Batch8Channel1)
for (i in 1:8) {
  # Construct the path dynamically
  path <- paste0("/maps/projects/thor/people/gjl413/projects/psychENCODE/data/SZBDMulti-Seq/CellrangerOutput_Intron/Batch", 
                 i, 
                 "Channel1/outs/filtered_feature_bc_matrix/")
  
  counts <- Read10X(data.dir = path)
  
  # Extract Gene Expression and HTO counts
  gene_counts <- counts$`Gene Expression`
  hto_counts <- counts$`Antibody Capture`
  
  # Step 1: Create Seurat object using HTO (Antibody Capture) data first
  cellhash <- CreateSeuratObject(counts = hto_counts, project = paste0("Batch", i), assay = "HTO")
  
  # Normalize and demultiplex HTO data
  cellhash <- NormalizeData(cellhash, assay = "HTO", normalization.method = "CLR")
  cellhash <- HTODemux(cellhash, assay = "HTO", positive.quantile = 0.75)  # Adjusted to avoid excessive doublets

  # Store hash.ID mapping
  ht_list[[i]] <- as.data.frame(cellhash$hash.ID)
  
  # Step 2: Add the Gene Expression counts for all cells (NO subsetting yet)
  cellhash[["RNA"]] <- CreateAssayObject(counts = gene_counts[, colnames(cellhash)]) 
  
  # Store the gene expression counts for reference
  toc_list[[i]] <- as.data.frame(gene_counts[, colnames(cellhash)]) 
  
  # Store each batch in a list
  batch_list[[i]] <- cellhash
}

# Step 3: Merge All Batches Into One Seurat Object (WITHOUT Subsetting Singlets)
seurat_obj <- merge(batch_list[[1]], y = batch_list[2:8], add.cell.ids = paste0("Batch", 1:8), project = "Merged_SZBD")

# Save results
saveRDS(seurat_obj, file = "/maps/projects/thor/people/tbm613/seurat_merged.rds")
saveRDS(ht_list, file = "/maps/projects/thor/people/tbm613/hashtag5.rds")
saveRDS(toc_list, file = "/maps/projects/thor/people/tbm613/toc5.rds")


4th try with gene names?

library(Seurat)

batch_list <- list()  # Store Seurat objects for each batch
ht_list <- list()  # Store hash.ID mapping
toc_list <- list() # Store raw gene expression counts

# Loop through batches (Batch1Channel1 to Batch8Channel1)
for (i in 1:8) {
  # Construct the path dynamically
  path <- paste0("/maps/projects/thor/people/gjl413/projects/psychENCODE/data/SZBDMulti-Seq/CellrangerOutput_Intron/Batch", 
                 i, 
                 "Channel1/outs/filtered_feature_bc_matrix/")
  
  counts <- Read10X(data.dir = path)  # Read raw data
  
  # Extract Gene Expression and HTO counts
  gene_counts <- counts$`Gene Expression`
  hto_counts <- counts$`Antibody Capture`
  
  # Ensure Gene Names Are Assigned (before creating Seurat object)
  rownames(gene_counts) <- rownames(counts$`Gene Expression`)  # Assign gene names
  
  # Step 1: Create Seurat object using HTO data first
  cellhash <- CreateSeuratObject(counts = hto_counts, project = paste0("Batch", i), assay = "HTO")
  
  # Normalize and demultiplex HTO data
  cellhash <- NormalizeData(cellhash, assay = "HTO", normalization.method = "CLR")
  cellhash <- HTODemux(cellhash, assay = "HTO", positive.quantile = 0.75)  # Adjust threshold if needed

  # Store hash.ID mapping
  ht_list[[i]] <- as.data.frame(cellhash$hash.ID)
  
  # Step 2: Add Gene Expression Data to the Seurat Object (with correct gene names)
  cellhash[["RNA"]] <- CreateAssayObject(counts = gene_counts[, colnames(cellhash)]) 
  
  # Store gene expression counts
  toc_list[[i]] <- as.data.frame(gene_counts[, colnames(cellhash)]) 
  
  # Store each batch in a list
  batch_list[[i]] <- cellhash
}

# Step 3: Merge All Batches Into One Seurat Object
seurat_obj <- merge(batch_list[[1]], y = batch_list[2:8], add.cell.ids = paste0("Batch", 1:8), project = "Merged_SZBD")

# Save results
saveRDS(seurat_obj, file = "/maps/projects/thor/people/tbm613/seurat_merged.rds")
saveRDS(ht_list, file = "/maps/projects/thor/people/tbm613/hashtag.rds")
saveRDS(toc_list, file = "/maps/projects/thor/people/tbm613/toc.rds")

----------

1. VERIFY THE HTO DEMULTIPLEXING RESULTS & gene names

table(seurat_obj$HTO_classification.global)
table(seurat_obj$hash.ID)


head(rownames(seurat_obj[["RNA"]]@counts))
head(colnames(seurat_obj))


2. REMOVE DOUBLETS AND NEGATIVES

seurat_obj <- subset(seurat_obj, subset = HTO_classification.global == "Singlet")
table(seurat_obj$HTO_classification.global)


3. SUBSET ONLY SZ & CON

unique(seurat_obj$hash.ID)
seurat_obj <- subset(seurat_obj, subset = hash.ID %in% grep("^SZ|^CON", unique(seurat_obj$hash.ID), value = TRUE))
table(seurat_obj$hash.ID)

VlnPlot(seurat_obj, 
        features = c("nFeature_RNA", "nCount_RNA"), 
        group.by = "HTO_classification.global", 
        pt.size = 0,  # Removes points
        ncol = 2)


VISUALIZATION OF SEURAT:
4. STANDARD scRNA-seq workflow

DefaultAssay(seurat_obj)
DefaultAssay(seurat_obj) <- "RNA"

slotNames(seurat_obj@assays$RNA)
dim(GetAssayData(seurat_obj, layer = "counts"))

seurat_obj <- FindVariableFeatures(seurat_obj, selection.method = "vst", nfeatures = 2000, layer = "counts")

# Normalize Data
seurat_obj <- NormalizeData(seurat_obj, layer = "counts")
# Scale Data
seurat_obj <- ScaleData(seurat_obj, features = VariableFeatures(seurat_obj), layer = "counts")

# Run PCA
seurat_obj <- RunPCA(seurat_obj)
ElbowPlot(seurat_obj)  # Check how many PCs to use

# Use 10 PCs for clustering
seurat_obj <- FindNeighbors(seurat_obj, dims = 1:10)
seurat_obj <- FindClusters(seurat_obj, resolution = 0.5)  # Adjust resolution as needed

# Run UMAP using the same PCs
seurat_obj <- RunUMAP(seurat_obj, dims = 1:10)

seurat_obj$group <- ifelse(grepl("^SZ", seurat_obj$hash.ID), "SZ", "CON")
DimPlot(seurat_obj, reduction = "umap", group.by = "group")



WHEN ANALYZING seurat_merged.rds:
#Load Seurat Object
seurat_obj <- readRDS("/maps/projects/thor/people/tbm613/seurat_merged.rds")

#Check cell and gene counts
dim(seurat_obj)

#Check metadata
head(seurat_obj@meta.data)

#Only want high-confidence assignments & SZ/CON
seurat_obj <- subset(seurat_obj, subset = HTO_classification.global == "Singlet")
table(seurat_obj$HTO_classification.global)  # Should now only contain "Singlet"

seurat_obj <- subset(seurat_obj, subset = hash.ID %in% grep("^SZ|^CON", unique(seurat_obj$hash.ID), value = TRUE))
table(seurat_obj$hash.ID)

#Check gene expression data
head(rownames(seurat_obj[["RNA"]]@counts))

# UMAP
# Run Variable Features Selection
DefaultAssay(seurat_obj)
DefaultAssay(seurat_obj) <- "RNA"

slotNames(seurat_obj@assays$RNA)
dim(GetAssayData(seurat_obj, layer = "counts"))

seurat_obj <- FindVariableFeatures(seurat_obj, selection.method = "vst", nfeatures = 2000, layer = "counts")

# Normalize Data
seurat_obj <- NormalizeData(seurat_obj, layer = "counts")
# Scale Data
seurat_obj <- ScaleData(seurat_obj, features = VariableFeatures(seurat_obj), layer = "counts")

# Run PCA
seurat_obj <- RunPCA(seurat_obj)
ElbowPlot(seurat_obj)  # Check how many PCs to use

# Use 10 PCs for clustering
seurat_obj <- FindNeighbors(seurat_obj, dims = 1:10)
seurat_obj <- FindClusters(seurat_obj, resolution = 0.5)  # Adjust resolution as needed

# Run UMAP using the same PCs
seurat_obj <- RunUMAP(seurat_obj, dims = 1:10)

seurat_obj$group <- ifelse(grepl("^SZ", seurat_obj$hash.ID), "SZ", "CON")
DimPlot(seurat_obj, reduction = "umap", group.by = "group")

# Annotate the clusters (cell types)
cluster_markers <- FindAllMarkers(seurat_obj, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
head(cluster_markers)

FeaturePlot(seurat_obj, features = c("CUX2", "GLIS3", "ENSG00000233290", "ENSG00000229425", "TESPA1")) #with cell types I obtained

# Label the clusters
Idents(seurat_obj) <- "seurat_clusters"
levels(seurat_obj)

new_ids <- paste0("Cluster", as.numeric(levels(seurat_obj)) + 1)
names(new_ids) <- levels(seurat_obj)
seurat_obj <- RenameIdents(seurat_obj, new_ids)


# Differential expression (SZ vs CON)
deg_sz_vs_con <- FindMarkers(seurat_obj, ident.1 = "SZ", ident.2 = "CON", group.by = "group", logfc.threshold = 0.25)
deg_sz_vs_con <- FindMarkers(seurat_obj, ident.1 = "SZ", ident.2 = "CON", group.by = "group", logfc.threshold = 0.25)
